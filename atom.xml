<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[leebug's blog]]></title>
  <subtitle><![CDATA[听潮起又潮落，看花开又花谢]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://leebug38.github.io/"/>
  <updated>2014-05-20T11:58:46.997Z</updated>
  <id>http://leebug38.github.io/</id>
  
  <author>
    <name><![CDATA[leebug]]></name>
    <email><![CDATA[leebug38@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Android开发--起步]]></title>
    <link href="http://leebug38.github.io/2014/03/07/android%E5%BC%80%E5%8F%91--%E8%B5%B7%E6%AD%A5/"/>
    <id>http://leebug38.github.io/2014/03/07/android开发--起步/</id>
    <published>2014-03-07T01:19:17.000Z</published>
    <updated>2014-03-07T12:07:21.000Z</updated>
    <content type="html"><![CDATA[<p>暑假找工作前再学习一个技能，这次坚决不加黄点，来点实在的。考虑自身将来的发展，我一直希望以后的工作围绕<strong>用户体验</strong>，不管是App开发、Web开发，甚至机器学习一类的研究开发，我都希望离用户近点。对于Android开发，我还几乎是零基础，Java也不太会，不过任何学问技术，在精通之前总是相对容易的，只有愿不愿意了！由于某些原因，这次得在windows下先混一段时间了，Go!</p>
<h1 id="ADT-Bundle快速搭建">ADT-Bundle快速搭建</h1>
<p>ADT-Bundle是由<a href="http://developer.android.com/index.html" target="_blank">Google Android官方</a>提供的集成式IDE，其中包含了<strong>Eclipse</strong>，你无需再去下载<strong>Eclipse</strong>，并且里面已集成了插件，它解决了大部分新手通过<strong>Eclipse</strong>来配置Android开发环境的复杂问题。</p>
<h2 id="ADT-Bundle下载">ADT-Bundle下载</h2>
<p>下载链接：<a href="http://developer.android.com/sdk/index.html" target="_blank">ADT-Bundle下载</a>，我的下载包的文件名为：<code>adt-bundle-windows-x86-20131030.zip</code>，ADT-Bundle包括了开发所需的一切，解压后目录：<img src="/image/directory.PNG" alt="directory"></p>
<h2 id="安装JDK">安装JDK</h2>
<p>Android开发是基于Java语言、工具和库的，所以得安装Java。现在已经到了JDK 1.7版本，下载链接：<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank">JDK下载</a>，关于如何安装，配置<code>JAVA_HOME</code>、<code>CLASSPATH</code>、<code>PATH</code>自行<a href="http://www.google.com.hk/" target="_blank">Google</a>之。检测是否配置成功：cmd终端里面<code>java -version</code>,<code>javac -version</code>看结果即可。</p>
<h2 id="设置Tools_PATH">设置Tools PATH</h2>
<p>为了方便以后在命令行使用Android SDK Tools，可以将<code>&lt;your folder&gt;/android-sdk/tools/</code>和<code>&lt;yobur folder&gt;/android-sdk/platform-tools/</code>两个路径添加到PATH环境变量中，其中<code>&lt;your folder&gt;</code>为你的<code>android-sdk</code>文件夹放置目录。</p>
<h2 id="SDK管理器">SDK管理器</h2>
<p>运行ADT-Bundle下载包的解压根目录下的<code>SDK Manager.exe</code>，进入界面选择需要的Tools以及API等级进行安装或更新。在<strong>Eclipse</strong>中也可以打开，打开过程：Window -&gt; Android SDK Manager。</p>
<h2 id="配置AVD">配置AVD</h2>
<p>AVD（Android Virtual Device），即模拟器，运行在电脑上的安卓虚拟设备，几乎跟一台真正的安卓设备一样。打开Window -&gt; Android Virtual Device Manager，然后<code>New</code>一个，见到下图界面：<img src="/image/avd.PNG" alt="avd">配置完后点击<code>Start</code>启动。</p>
<h1 id="Hello_World">Hello World</h1>
<p>创建一个Hello World项目，通过File -&gt; New -&gt; Android Application Project，然后输入Hello World（项目名字),一路到底。模拟器调试运行：右击android工程 -&gt; Run as -&gt; Android Application。</p>
<h1 id="Eclipse_+_Emacs">Eclipse + Emacs</h1>
<p>现在写<strong>Python</strong>和写博客都习惯用<strong>Emacs</strong>编辑器，基本脱离鼠标，全键盘操作。在<strong>Eclipse</strong>里面写了几行代码，感觉不太爽，就到Window -&gt; Preferences -&gt; General -&gt; Keys里面配置快捷键。来来回回的配置+体验，就在那么一瞬间发现了好东西，截图留作纪念：<img src="/image/eclipse_emacs.png" alt="keysSchema">真后悔没早点发现！发现后赶紧<a href="http://www.google.com.hk/" target="_blank">Google</a>，看看有没有更好的<strong>Emacs</strong>配置，后来发现了加强版插件<strong>Emacs+</strong>，也就是上面截图中的选择项了，关于如何安装，很简单，这里给个链接：<a href="http://www.mulgasoft.com/emacsplus" target="_blank">Emacsplus</a>。</p>
<h1 id="回头看看">回头看看</h1>
<p>虽然ADT-Bundle这么完善，这样方便了入门，却容易让人不知其所以然，所以建议还是了解下集成的部件是干嘛的，或者看看分步骤配置的过程。最后留几个知识点：</p>
<ol>
<li>PATH环境变量：作用是指定命令搜索路径，在命令行下面执行命令如javac编译java程序时，它会到PATH变量所指定的路径中查找看是否能找到相应的命令程序。我们需要把jdk安装目录下的bin目录增加到现有的PATH变量中，bin目录中包含经常要用到的可执行文件如javac/java/javadoc等待，设置好PATH变量后，就可以在任何目录下执行javac/java等工具了。</li>
<li>CLASSPATH环境变量：作用是指定类搜索路径，要使用已经编写好的类，前提当然是能够找到它们了，JVM就是通过CLASSPATH来寻找类的。我们需要把jdk安装目录下的lib子目录中的dt.jar和tools.jar设置到CLASSPATH中，当然，当前目录“.”也必须加入到该变量中。</li>
<li>JAVA_HOME环境变量。它指向jdk的安装目录，Eclipse/NetBeans/Tomcat等软件就是通过搜索JAVA_HOME变量来找到并使用安装好的jdk。</li>
</ol>
]]></content>
    
    
      <category term="Android" scheme="http://leebug38.github.io/tags/Android/"/>
    
      <category term="Eclipse" scheme="http://leebug38.github.io/tags/Eclipse/"/>
    
      <category term="Android" scheme="http://leebug38.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[博客装扮--Pacman主题]]></title>
    <link href="http://leebug38.github.io/2014/02/11/%E5%8D%9A%E5%AE%A2%E8%A3%85%E6%89%AE--pacman%E4%B8%BB%E9%A2%98/"/>
    <id>http://leebug38.github.io/2014/02/11/博客装扮--pacman主题/</id>
    <published>2014-02-11T03:26:55.000Z</published>
    <updated>2014-03-07T12:09:33.000Z</updated>
    <content type="html"><![CDATA[<p>人靠衣装，佛靠金装，<a href="http://zespia.tw/hexo/" target="_blank">Hexo</a>如此牛逼的博客，怎能没个让自己看着爽心的主题装扮下呢？<a href="http://zespia.tw/hexo/" target="_blank">Hexo</a>版本<code>2.4+</code>的默认主题是<code>Landscape</code>，看着实在没什么感觉，于是下定决心换一个自己看着爽心的主题。看到<a href="http://yangjian.me" target="_blank">Alimon’s blog</a>后，感觉这个博客的主题不错，尤其是<code>header</code>，<code>footer</code>部分，既然<em>中</em>了，那还等啥，走你！</p>
<h1 id="Pacman简介">Pacman简介</h1>
<p>Pacman是一款为<a href="http://zespia.tw/hexo/" target="_blank">Hexo</a>打造的<em>扁平化</em>，有着<em>响应式</em>设计的主题。<em>扁平化</em>和<em>响应式</em>在如今的手机应用、网页设计领域已是随处可见，「Win8 Metro」和「ios7」就是典型的扁平化设计，简约清晰！前端牛逼框架<a href="http://www.bootcss.com/" target="_blank">Bootstrap</a>也支持响应式设计，使得用户在移动设备上也有很好的体验。Pacman中所有的css都采用<a href="http://learnboost.github.io/stylus/" target="_blank">Stylus</a>编写，自己动手改动也比较方便，不懂前端的我对此深有感触。关于Pacman的更多详细介绍，参见<a href="http://yangjian.me/workspace/introducing-pacman-theme/" target="_blank">《Pacman主题介绍》</a>，安装、设置、更新、配置等都很详细。</p>
<h1 id="小改动">小改动</h1>
<h2 id="主题色">主题色</h2>
<p>Pacman默认颜色是<code>#ea6753</code>，蛮有活力的颜色，我本打算直接换一个主题色，但试了好几个，感觉一般。经过了漫无目的地思考与搜索，最后打算结合主题<a href="https://github.com/sun11/hexo-theme-paperbox" target="_blank">paperbox</a>的背景色。有了想法，动手开搞就是水到渠成了，直接贴操作过程：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>$ vi themes/pacman/<span class="built_in">source</span>/css/_base/variable.styl <span class="comment"># vi仅仅是编辑器</span>
</pre></td></tr></table></figure>

<p>修改其中的各种<code>颜色代码</code>，可以改变配色方案。我的主题的背景色是一张图片，Pacman代码的组织非常「模块化」，按照其思想，改动如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="variable">$ </span>vi themes/pacman/_config.yml  <span class="comment"># 添加background_img: img/noise.png</span>
  <span class="comment"># 下面文件中在//image位置出添加：background-img = hexo-config("background_img")</span>
<span class="variable">$ </span>vi themes/pacman/source/css/_base/variable.styl
</pre></td></tr></table></figure>

<p>接下来的修改中如果需要改成该背景图片颜色，将颜色设置为<code>url(root+background-img)</code>即可。「模块化」的好处就是：接下来你如果有其它背景图片，只需在<code>themes/pacman/_config.yml</code>中修改<code>background_img</code>属性就行了。</p>
<p>背景色设置成图片后，本着少改动的原则，我将<code>header</code>、<code>footer</code>的主题色设置为<code>transparent</code>，就有了现在的效果。</p>
<h2 id="hover配色">hover配色</h2>
<p>简而言之，css中<code>:hover</code>伪类作用：在鼠标移到元素上时向此元素添加特殊的样式。我也是这次该主题才涉足css，还是菜鸟中的菜鸟。受益于「模块化」的好处，改动还是比较容易的。改动Pacman的css代码，请进入<code>themes/pacman/source/css/_partial</code>文件夹改动。原先Pacman的鼠标悬停时元素变成「主题色」或者「蓝色」，我统一换成了「红蓝切换」，即巴萨队服的主颜色切换了。PS：一般都是改动<code>&amp;:hover</code>前后代码的<code>color</code>值。</p>
<h2 id="code样式">code样式</h2>
<p>默认的代码高亮配色感觉不是很搭，Pacman代码高亮使用的是<a href="http://highlightjs.org" target="_blank">highlight.js</a>，我打算参照在<a href="http://highlightjs.org/static/test.html" target="_blank">配色方案</a>中选取一种替代原先的配色，折腾了会不知道如何直接换，最后还是自己手动配色：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>$ vi themes/pacman/<span class="built_in">source</span>/css/_base/code.styl
</pre></td></tr></table></figure>

<p>无奈笨拙，只能自己选颜色代码，手动改，以后在琢磨高级的方法。</p>
<h2 id="图片">图片</h2>
<p>直接替换<code>themes/pacman/source/img</code>中的图片即可，再一次，费了不少心思搞了几张图片替换了。<code>header</code>处原先是<code>.svg</code>格式的图片，我也使用软件「inkscape」转换了，可惜没有达到应有的效果，主要是在IE浏览器中图片还是残了，只能自我安慰「珍爱前端程序员生命，请远离IE」。</p>
<h2 id="其它">其它</h2>
<p>想法还是挺多的，就是水平受限，其它的改动也不多，主要就是某些组件的排版，代码块背景设成圆角等等。以后边学习，边改动吧。</p>
<h1 id="写在最后">写在最后</h1>
<ul>
<li>Pacman需要安装<a href="http://zespia.tw/hexo/" target="_blank">Hexo</a> 2.4.5 或以上版本。</li>
<li>改网页布局啥的可以使用Chrome的「F12」，各种方便。</li>
<li>不懂代码没关系，知道改哪里就行了，在折腾过程中，我经常使用全局搜索包含某行代码的文件：<code>find &lt;folder&gt; | xargs grep &quot;目标代码&quot;</code>，然后或者修改，或者参考，还是挺方便的。</li>
<li>谢谢<a href="http://yangjian.me" target="_blank">yangjian.me</a>，这么好的主题，以及代码。</li>
<li>我的博客源文件<a href="https://github.com/leebug38/hexo" target="_blank">GitHub地址</a>。</li>
<li>以此主题致敬「红蓝巴萨」！</li>
</ul>
]]></content>
    
    
      <category term="hexo" scheme="http://leebug38.github.io/tags/hexo/"/>
    
      <category term="writing" scheme="http://leebug38.github.io/categories/writing/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用hexo搭建博客]]></title>
    <link href="http://leebug38.github.io/2014/02/06/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://leebug38.github.io/2014/02/06/使用hexo搭建博客/</id>
    <published>2014-02-06T10:17:12.000Z</published>
    <updated>2014-02-10T05:23:06.000Z</updated>
    <content type="html"><![CDATA[<p>开始我并没有打算搭建一个博客，只是想找个<em>平台</em>潦草地记录平时遇到的问题，再稍微规划下一些日常事情。最近半年终于干了点计算机工程方面的实事，之前都是水过的，说来实在惭愧。去年暑期实习的时候，我接触到了<em>Python</em>，<em>Git</em>，<em>Node.js</em>以及<em>MongoDB</em>，在此期间用<a href="http://cn.efficientsoftware.net/" target="_blank">高效e人</a>来记录点滴，但总感觉有点不符合程序猿的身份；后来寒假实习遇到了<a href="http://cn0popeye.com/" target="_blank">树上</a>，跟着他后面接触到了一些比较流行的技术，尤其是适合折腾的技术，这段时间学会使用<a href="http://trello.com" target="_blank">trello</a>来管理时间，另外有幸接触到了神的编辑器<em>emacs</em>和标记语言<em>markdown</em>。最近，烦于乱七八糟的记录以及臃肿的chrome书签，加之缺少整理的动力，最终的最终我准备搭建一个博客，以便自己整理总结平时所学所闻，之前也开通过几个BSP<sup><a href="#[1]">[1]</a></sup>类的博客，装饰好后没写一个字，实在没有写的动力；多亏了emacs，最近喜欢折腾一些技术，这次下定决心搭一个独立博客，寻找时发现<a href="http://cn.wordpress.org/" target="_blank">Wordpress</a>挺受人青睐，而且<em>emacs</em>也有很好的插件支持。就在折腾的初始阶段，看各种评论的时候发现了<em>Jekyll+github</em>，进而又邂逅了最终的选择<a href="http://zespia.tw/hexo/" target="_blank">hexo</a>，看到关于<a href="http://zespia.tw/hexo/" target="_blank">hexo</a>的描述时，犹如一股清泉注入心底，怎一个爽字了得！我就是冲着<em>Node.js</em>，<em>Git</em>和写博客神器<em>markdown</em>情定了<a href="http://zespia.tw/hexo/" target="_blank">hexo</a>，当然后来发现<a href="http://zespia.tw/hexo/" target="_blank">hexo</a>中的命令，配置等都封装好了好多技术细节。好了，闲话少说，进入正题，记录下这次博客折腾之旅，也是我的第一篇博客，与有缘人分享！PS：没有详细的教程，只有我参考的文章出处以及我纠结过的坎儿。</p>
<h1 id="hexo是啥">hexo是啥</h1>
<p><a href="http://zespia.tw/hexo/" target="_blank">hexo</a>是一个基于<a href="http://nodejs.org/" target="_blank">Node.js</a>的静态博客程序，我在寻觅博客的时候，发现好多博客都标榜了<strong>静态博客程序</strong>，我的理解就是本地生成了静态html文件，然后再部署到服务器上。由于没有折腾过其他博客，博客之间的差异我也无从比较，只能人云亦云了。关于<a href="http://zespia.tw/hexo/" target="_blank">hexo</a>的特点，出现频率最高的就是：</p>
<blockquote>
<p>快速！简单！可扩展性！</p>
</blockquote>
<h1 id="万事具备">万事具备</h1>
<p>不懂这些也没关系，我只是想稍微整理下。</p>
<h2 id="Node-js">Node.js</h2>
<p><a href="http://nodejs.org/" target="_blank">Node.js</a>是一个让<em>JavaScript</em>运行在服务端的开发平台，<a href="http://nodejs.org/" target="_blank">Node.js</a>的<em>JavaScript</em>引擎是V8，来自Google Chrome项目。特点：</p>
<blockquote>
<p>事件驱动；异步编程；回调函数；适合I/O密集型需求</p>
</blockquote>
<p>我也是去年暑假在一家初创企业实习时，偶然接触到了<a href="http://nodejs.org/" target="_blank">Node.js</a>，后来在学校折腾小论文，也没怎么进一步研究。总的感觉就是：理解其思想相对容易，想要深入掌握<a href="http://nodejs.org/" target="_blank">Node.js</a>的话，需有较为深厚的JS功力（往往是前端JS）；对我而言，之前没有写过JS，所以瓶颈就在JS这门语言上，这里我只能补充一句<strong>JS博大精深</strong>啊！</p>
<ul>
<li><a href="http://book.douban.com/subject/10789820/" target="_blank">《Node.js开发指南》</a>：入门级书，按照书上搭建一个简易的博客还是不错的！</li>
<li><a href="http://book.douban.com/subject/25768396/" target="_blank">《深入浅出Node.js》</a>：上个月刚入手的一本书，书很实用，就是对我来说还有点深奥，JS是硬伤！里面很多高级的用法，比如我的代码中尽是嵌套很深的回调函数，书中有几种优美的解决方案。慢慢研习！</li>
</ul>
<h2 id="Git_&amp;_GitHub">Git &amp; GitHub</h2>
<blockquote>
<p><a href="http://git-scm.com/" target="_blank">Git</a>是一个免费的开源分布式版本控制系统，可以使用它来快速，高效的处理一切大小项目。<br /><br><a href="http://github.com/" target="_blank">GitHub</a>是这个星球上最流行的开源托管服务，是一个程序员的名片，这年头不逛GitHub，都不好意思说自己是程序猿。</p>
</blockquote>
<p>开始遇到<a href="http://git-scm.com/" target="_blank">Git</a>的时候，建立的是本地仓库，我也只会用<code>git clone</code>，<code>git init</code>，<code>git add</code>，<code>git commit</code>和<code>git push</code>这些简单命令，后来慢慢接触到<a href="http://github.com/" target="_blank">GitHub</a>以及可以免费建立私人仓库的<a href="http://bitbucket.org/" target="_blank">Bitbucket</a>，也熟悉了更多应用场合和命令，本地和远程仓库的基本使用还是能hold住的。列出一些参考资料，其中我也只看了<a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank">Git 简易指南</a>和<a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html" target="_blank">Git图解</a>：</p>
<h3 id="Git入门">Git入门</h3>
<ul>
<li>入门宝典：<a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank">Git 简易指南</a>，简洁明了。</li>
<li><a href="http://git-scm.com/" target="_blank">Git</a>的官方网站提供了<a href="http://git-scm.com/" target="_blank">Git</a>的所有<a href="http://git-scm.com/doc" target="_blank">文档</a>。也可以参考<a href="http://gitref.org/" target="_blank">Git Reference</a>。</li>
<li>书籍：<ul>
<li>《Pro Git》提供在线的<a href="http://git-scm.com/book/zh" target="_blank">中文版</a>和<a href="http://git-scm.com/book" target="_blank">英文版</a>。</li>
<li><a href="http://book.douban.com/subject/6526452/" target="_blank">《Git权威指南》</a>：内容略充实了点。</li>
</ul>
</li>
<li>Github与Code School联合提供了一个在线互动教程：<a href="http://try.github.io/levels/1/challenges/1" target="_blank">Try Git</a>。</li>
<li>进阶篇：<ul>
<li><a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html" target="_blank">Git图解</a>：简洁，有事没事可以瞅瞅。</li>
<li><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/index.html" target="_blank">Git Magic</a>。</li>
<li><a href="http://think-like-a-git.net" target="_blank">Think like a Git</a>。</li>
</ul>
</li>
</ul>
<h3 id="GitHub入门">GitHub入门</h3>
<ul>
<li><a href="http://github.com/" target="_blank">Github</a>提供了官方的<a href="http://help.github.com/" target="_blank">帮助信息</a>和他们的<a href="http://github.com/blog" target="_blank">博客</a>。</li>
<li><a href="http://book.douban.com/subject/6526452/" target="_blank">《Git权威指南》</a>作者蒋鑫编写的<a href="http://www.worldhello.net/gotgithub/01-explore-github/index.html#id8" target="_blank">GotGitHub</a>。</li>
<li>如果还对加入<a href="http://github.com/" target="_blank">Github</a>犹豫不决，看下<a href="http://www.yangzhiping.com/tech/github.html" target="_blank">如何高效利用Github</a>。</li>
</ul>
<h2 id="Markdown">Markdown</h2>
<p>第一次知道Markdown的时候，脑海里突然闪现出N多<code>.md</code>后缀的文件，典型的如<a href="http://github.com/" target="_blank">Github</a>中仓库的<code>README.md</code>，相见恨晚啊！。后来各种机会跟Markdown碰面，最终也成了我挑选博客的必备条件之一！特点：</p>
<blockquote>
<p>轻量级标记语言；格式即内容；易读易写；兼容HTML</p>
</blockquote>
<p>兼容HTML意义重大，比如Markdown中插入图片没法调整大小，但是使用HTML中<code>&lt;img&gt;</code>标签就相当easy了！各种学习文档自行<a href="http://www.google.com.hk/" target="_blank">Google</a>之，这里再留下几点：</p>
<ul>
<li>查阅语法：<a href="http://wowubuntu.com/markdown/" target="_blank">Markdown语法说明</a></li>
<li>编辑器：<ul>
<li><a href="https://chrome.google.com/webstore/detail/made/oknndfeeopgpibecfjljjfanledpbkog" target="_blank">MaDe</a>：Chrome插件，还行。</li>
<li><a href="http://www.zybuluo.com/mdeditor" target="_blank">Cmd</a>：在线Markdown编辑阅读器，很人性化，同步滚动。</li>
<li><em>emacs</em>: 写博客使用，需要一定的决心来折腾此神器。</li>
</ul>
</li>
</ul>
<h1 id="搭建">搭建</h1>
<p>搭建详细过程参考：</p>
<ul>
<li><a href="http://zespia.tw/hexo/docs/index.html" target="_blank">官方文档</a></li>
<li><a href="http://yangjian.me/workspace/building-blog-with-hexo/" target="_blank">Alimon’s blog</a></li>
<li><a href="http://zipperary.com/categories/hexo/" target="_blank">Zippera’s blog</a></li>
</ul>
<h2 id="关于版本">关于版本</h2>
<ul>
<li>系统：Ubuntu 12.04.3 LTS 32bit</li>
<li><a href="http://nodejs.org/" target="_blank">Node.js</a>：v0.10.25</li>
<li><em>npm</em>：1.3.24</li>
<li><a href="http://zespia.tw/hexo/" target="_blank">hexo</a>：2.4.5</li>
</ul>
<h2 id="安装">安装</h2>
<p>安装时使用<a href="http://nodejs.org/" target="_blank">Node.js</a>的包管理器<em>npm</em>，一般安装<a href="http://nodejs.org/" target="_blank">Node.js</a>的时候会自带安装。这里给个在各种平台安装<a href="http://nodejs.org/" target="_blank">Node.js</a>的<a href="http://www.infoq.com/cn/articles/nodejs-npm-install-config" target="_blank">链接</a>。</p>
<p>主要命令：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="variable">$ </span>npm install -g hexo
<span class="variable">$ </span>hexo init &lt;folder&gt;
</pre></td></tr></table></figure>

<p><code>npm install</code>加上参数<code>-g</code>表示全局安装，否则你会发现在当前目录文件下多了<code>node_modules</code>文件夹，工具都安装在其中。我在安装插件时就是不带参数<code>-g</code>安装：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="variable">$ </span>npm install &lt;plugin-name&gt; <span class="comment"># 安装hexo-generator-feed和 hexo-generator-sitemap</span>
</pre></td></tr></table></figure>

<h2 id="配置">配置</h2>
<p>全局配置文件存储在博客根目录下，名为<code>_config.yml</code>，参考上面的文档，尽情配置吧！</p>
<h2 id="主题">主题</h2>
<p>执行下面的命令拷贝主题包到本地，然后修改<code>_config.yml</code>中的<code>theme</code>项为<code>theme-name</code>。目前已有主题见<a href="http://github.com/tommy351/hexo/wiki/Themes" target="_blank">官方主题</a>。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>$ git clone <span class="tag">&lt;<span class="title">repository</span>&gt;</span> themes/<span class="tag">&lt;<span class="title">theme-name</span>&gt;</span>
</pre></td></tr></table></figure>

<p>我的博客采用的是<a href="http://github.com/tommy351/hexo/wiki/Themes" target="_blank">Pacman</a>主题，并且借用了<a href="http://zipperary.com/categories/hexo/" target="_blank">Zippera’s blog</a>的背景图片，然后将主题颜色配置为红蓝色<sup><a href="#[2]">[2]</a></sup>。</p>
<h2 id="本地运行与调试">本地运行与调试</h2>
<p>在本地如果需要预览或者调试你的博客，可以启动本地服务器：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="variable">$ </span>hexo server
</pre></td></tr></table></figure>

<p>网页运行在<code>http://localhost:4000</code>，更多高级启动方式参见<a href="http://zespia.tw/hexo/docs/index.html" target="_blank">官方文档</a>。</p>
<h2 id="部署">部署</h2>
<p>我将博客部署到<a href="http://github.com/" target="_blank">Github</a>上，配置文件<code>_config.yml</code>：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="label">deploy:</span>
  type: github
  repository: https://github<span class="preprocessor">.com</span>/leebug38/leebug38<span class="preprocessor">.github</span><span class="preprocessor">.io</span><span class="preprocessor">.git</span>
  branch: master
</pre></td></tr></table></figure>

<p>需要在<a href="http://github.com/" target="_blank">Github</a>上创建仓库，并且仓库名一定要为<code>username.github.io</code>，<code>username</code>为你的<a href="http://github.com/" target="_blank">Github</a>注册用户名，即二级域名。配置文件中代码仓库<code>URL</code>最好使用<code>https</code>形式的。其实上面的步骤就是布置<a href="http://pages.github.com/" target="_blank">GitHub Pages</a>。我没有使用个性域名，若有其他需求，可以看上面的参考文档以及<a href="http://pages.github.com/" target="_blank">GitHub Pages</a>的<a href="http://help.github.com/categories/20/articles" target="_blank">帮助文档</a>。最后部署到<a href="http://github.com/" target="_blank">Github</a>上：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="variable">$ </span>hexo clean  <span class="comment"># 清除缓存文件(db.json)和hexo generate生成的文件(public)</span>
<span class="variable">$ </span>hexo generate <span class="comment"># 生成静态文件，存储在public文件夹中</span>
<span class="variable">$ </span>hexo deploy <span class="comment"># 部署你的网页</span>
</pre></td></tr></table></figure>

<p>等十分钟左右，在浏览器中输入<code>username.github.io</code>就见到成果了。注意<code>hexo deploy</code>的部署过程：将<code>public</code>中文件复制到<code>.deploy</code>中，然后就是利用<a href="http://git-scm.com/" target="_blank">Git</a>来<code>push</code>到远程<a href="http://github.com/" target="_blank">GitHub</a>仓库了。</p>
<h2 id="写博客">写博客</h2>
<p>博客根目录下一行命令即可：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>$ hexo <span class="keyword">new</span> [layout] &lt;title&gt;
</pre></td></tr></table></figure>

<p><a href="http://zespia.tw/hexo/" target="_blank">hexo</a>有三种<code>layout</code>: <code>post</code>，<code>page</code>，和<code>draft</code>。不带此参数，则采用默认<code>layout</code>，文件<code>_config.yml</code>配置<code>default_layout</code>项。详情可以参考<a href="http://zespia.tw/hexo/docs/writing.html" target="_blank">writing</a>。</p>
<h2 id="简单优化">简单优化</h2>
<p>参照上面三篇文档，我也进行了简单优化：添加了<code>多说评论</code>，<code>RSS</code>，<code>sitemap</code>，以后优化完成后一并补上折腾过程。</p>
<h1 id="后话">后话</h1>
<ul>
<li>博客的搭建就暂且到这里，优化的路还很长，比如前端按照自己喜好修改等等。</li>
<li>第一篇博客写的也有点冗长，大招时间憋长了，见谅！</li>
<li><em>Markdown</em>真乃神器，初次使用，总感觉写的不好，多看多写！</li>
<li>学习一样东西最好的方法是：先模仿大神，再根据自己的需要来折腾！</li>
</ul>
<hr>
<p><span id="[1]">[1]</span> BSP：博客服务提供商。</p>
<p><span id="[2]">[2]</span> 红蓝色：西甲豪门巴塞罗那的队服颜色，代表了巴萨。本人正努力成为合格的巴萨球迷。</p>
]]></content>
    
    
      <category term="hexo" scheme="http://leebug38.github.io/tags/hexo/"/>
    
      <category term="Node.js" scheme="http://leebug38.github.io/tags/Node.js/"/>
    
      <category term="Git" scheme="http://leebug38.github.io/tags/Git/"/>
    
      <category term="Markdown" scheme="http://leebug38.github.io/tags/Markdown/"/>
    
      <category term="writing" scheme="http://leebug38.github.io/categories/writing/"/>
    
  </entry>
  
</feed>
