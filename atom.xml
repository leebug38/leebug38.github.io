<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[leebug's blog]]></title>
  <subtitle><![CDATA[听潮起又潮落，看花开又花谢]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://leebug38.github.io/"/>
  <updated>2014-08-06T11:45:21.677Z</updated>
  <id>http://leebug38.github.io/</id>
  
  <author>
    <name><![CDATA[leebug]]></name>
    <email><![CDATA[leebug38@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[阿里推荐大赛Season1--(3)]]></title>
    <link href="http://leebug38.github.io/2014/08/04/%E9%98%BF%E9%87%8C%E6%8E%A8%E8%8D%90%E5%A4%A7%E8%B5%9Bseason1--(3)/"/>
    <id>http://leebug38.github.io/2014/08/04/阿里推荐大赛season1--(3)/</id>
    <published>2014-08-04T07:29:29.000Z</published>
    <updated>2014-08-05T07:43:33.000Z</updated>
    <content type="html"><![CDATA[<p>接上篇，整理下<em>策略</em>跟<em>LR</em>部分的代码。</p>
<h1 id="策略预测">策略预测</h1>
<p>今天在写这篇总结的时候，刚好数据心跳发了一篇他的心路历程<a href="http://www.yumumu.me/Ali_BigData/" target="_blank">《成也solo，败也solo》</a>。他里面提到Season1的时候他靠纯规则刷到<code>7.45%</code>，我还是很佩服的，想想当时我们刷了个半死，才刷到<code>7.11%</code>。对于这个比赛，如果靠规则，那么比的就是天赋、分析能力；如果靠机器学习算法，那么比的就是理论基础、耐心和学习能力。</p>
<h2 id="暴力存储">暴力存储</h2>
<p>Season1的数据量不大，基本可以暴力读到内存操作，在使用策略进行预测的时候，我们使用了一种比较暴力、直观的数据结构。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">get_date_of_all_action</span><span class="params">(path, start_date, end_date)</span>:</span> <span class="comment"># 可以指定时间段</span>
    reader = csv.reader(open(path))
    user_brand = {}
    <span class="keyword">for</span> user,brand,action,v_date <span class="keyword">in</span> reader:
        now = get_date(v_date)
        <span class="keyword">if</span> now &gt;= start_date <span class="keyword">and</span> now &lt; end_date:
            delta_days = (now - date(<span class="number">2013</span>,<span class="number">4</span>,<span class="number">15</span>)).days
            user_brand.setdefault(user, {})
            user_brand[user].setdefault(brand, {<span class="string">'click'</span>: [],
                                                <span class="string">'buy'</span>: [],
                                                <span class="string">'fav'</span>: [],
                                                <span class="string">'cart'</span>: []})
            <span class="keyword">if</span> action == <span class="string">'0'</span>:
                user_brand[user][brand][<span class="string">'click'</span>].append(delta_days)
            <span class="keyword">elif</span> action == <span class="string">'1'</span>:
                user_brand[user][brand][<span class="string">'buy'</span>].append(delta_days)
            <span class="keyword">elif</span> action == <span class="string">'2'</span>:
                user_brand[user][brand][<span class="string">'fav'</span>].append(delta_days)
            <span class="keyword">elif</span> action == <span class="string">'3'</span>:
                user_brand[user][brand][<span class="string">'cart'</span>].append(delta_days)
    <span class="keyword">return</span> user_brand
</pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">get_date_of_all_action_to_brand</span><span class="params">(user_brand)</span>:</span>
  brand_user = {}
  <span class="keyword">for</span> user <span class="keyword">in</span> user_brand:
    <span class="keyword">for</span> item <span class="keyword">in</span> user_brand[user]:
      brand_user.setdefault(item,{})
      brand_user[item][user] = user_brand[user][item]
  <span class="keyword">return</span> brand_user
</pre></td></tr></table></figure>

<p>大体结构：<code>{u1: {b1: {&#39;click&#39;: [t11,t12,...], &#39;buy&#39;: [t21,t22,...], ...}, ...}, ...}</code>，这样可以任意操作某个(u,b)的历史行为的时间序列（List存储），这里我们把时间转为了距离4月15日那天的天数，天数区间[0, 122]。函数<code>get_date_of_all_action_to_brand</code>仅仅是将u和b的键值关系对调一下，因为某些策略需要着重考虑品牌，这样的结构相对方便一些。</p>
<h2 id="策略实例">策略实例</h2>
<p>Season1几乎都在围绕策略做，想了很多策略，效果最好的就是给四种行为一定的权重，再考虑时间衰减因素。除此以外，考虑很多特殊情况，用打补贴的方式添加到最终的预测结果中。比如下面这个看着让人捉急的策略：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">get_brand_buy_and_click</span><span class="params">(user_brand)</span>:</span>      <span class="comment"># 传入上面的暴力结构</span>
    user_buy = {}                             <span class="comment"># 存放预测结果</span>
    <span class="keyword">for</span> u,b_dict <span class="keyword">in</span> user_brand.items():
        <span class="keyword">for</span> b,actions <span class="keyword">in</span> b_dict.items():
            buy_arr = actions[<span class="string">'buy'</span>]
            click_arr = actions[<span class="string">'click'</span>]
            <span class="keyword">if</span> buy_arr:
                last_buy = max(buy_arr)
                <span class="keyword">if</span> last_buy &gt; <span class="number">105</span>:            <span class="comment"># 最后一次购买在最近半月</span>
                    user_buy.setdefault(u, set())
                    user_buy[u].add(b)
                <span class="keyword">if</span> last_buy &gt; <span class="number">45</span>:
                    <span class="keyword">if</span> len(set(buy_arr)) &gt;= <span class="number">2</span>:                 <span class="comment"># 在至少两个不同日期购买过</span>
                        buy_np = np.array(buy_arr, float)
                        <span class="keyword">if</span> buy_np.var() &gt; <span class="number">6</span>:                   <span class="comment"># 购买的时间序列的方差至少为6</span>
                            user_buy.setdefault(u, set())
                            user_buy[u].add(b)
                <span class="keyword">if</span> click_arr:                 <span class="comment"># 考虑有购买行为(u,b)的点击行为</span>
                    last_click = max(click_arr)
                    <span class="keyword">if</span> last_click &gt; last_buy <span class="keyword">and</span> last_click &gt; <span class="number">110</span>:
                    <span class="comment"># 最后一次购买之后还有点击，并且点击行为的时间是在最近13天</span>
                        user_buy.setdefault(u, set())
                        user_buy[u].add(b)
                    after_buy = [i <span class="keyword">for</span> i <span class="keyword">in</span> click_arr <span class="keyword">if</span> i &gt; last_buy]
                    <span class="keyword">if</span> len(set(after_buy)) &gt;= <span class="number">3</span>:
                    <span class="comment"># 最后一次购买后，在至少3个日期再次发生点击行为</span>
                        after_buy_np = np.array(after_buy, float)
                        <span class="keyword">if</span> after_buy_np.var() &gt; <span class="number">4</span>:
                            user_buy.setdefault(u, set())
                            user_buy[u].add(b)
    <span class="keyword">return</span> user_buy
</pre></td></tr></table></figure>

<p>现在想想这些策略，感觉当时的我们想的有点复杂了。</p>
<h1 id="浅谈LR">浅谈LR</h1>
<p>跟LR的狗血在之前Season1流水账部分就已经扯过了，这里主要记录下方法。这里再次感谢<a href="http://oilbeater.com/" target="_blank">oilbeater</a>大神的<a href="http://oilbeater.com/%E9%98%BF%E9%87%8C%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%AF%94%E8%B5%9B/2014/04/04/the-bigdata-race-3.html" target="_blank">LR入门</a>，关于LR的简单介绍以及使用的算法包可以参考它。</p>
<p>在知道原理，又有算法包后，最关键的就是构建训练集跟测试集了。在这个数据集中，训练集由两部分组成：特征＋label，其中label是最后一个月有没有买，买了就标记为1，否则为0。测试集只需要相应的特征就行，根据训练的模型，可以预测某个(u,b)买还是不买。下面我们主要以构造训练集为例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">construct_train</span><span class="params">(out_path, feature, label, user_buy_count, brand_bought_count)</span>:</span>
    writer = csv.writer(file(out_path, <span class="string">'wb'</span>))
    n_count = <span class="number">0</span>                       <span class="comment"># 标记负样本(label=0)的序号</span>
    writer.writerow((<span class="string">'label'</span>,<span class="string">'click_score'</span>,<span class="string">'fav_score'</span>,<span class="string">'cart_score'</span>,
                     <span class="string">'buy_score'</span>,<span class="string">'u_count'</span>,<span class="string">'b_count'</span>))
    <span class="keyword">for</span> u,b_dict <span class="keyword">in</span> feature.items():
        u_count = user_buy_count.get(u, <span class="number">0</span>)
        <span class="keyword">for</span> b,f_arr <span class="keyword">in</span> b_dict.items():
            b_count = brand_bought_count.get(b, <span class="number">0</span>)
            <span class="keyword">if</span> (u,b) <span class="keyword">in</span> label:
                writer.writerow((<span class="number">1</span>, f_arr[<span class="number">0</span>], f_arr[<span class="number">1</span>], f_arr[<span class="number">2</span>], f_arr[<span class="number">3</span>],
                                 u_count, b_count))
            <span class="keyword">else</span>:
                n_count += <span class="number">1</span>
                <span class="keyword">if</span> n_count % <span class="number">120</span> == <span class="number">0</span>:        <span class="comment"># 类似于对负样本抽样，按模抽样</span>
                    writer.writerow((<span class="number">0</span>, f_arr[<span class="number">0</span>], f_arr[<span class="number">1</span>], f_arr[<span class="number">2</span>], f_arr[<span class="number">3</span>],
                                     u_count, b_count))
</pre></td></tr></table></figure>

<p>这里，feature是一个字典，结构：<code>{u1: {b1: [v1,v2,v3,v4], ...}, ...}</code>，List<code>[v1,v2,v3,v4]</code>表示四种行为的时间衰减评分（代码省略），这样有了feature后，也就有了有行为(u,b)的基本的四个特征。label是一个元组集合，即最后一个月有购买行为的(u,b)对集合。<code>user_buy_count</code>表示用户购买的品牌数，结构：<code>{u1: {b1: b1_count, ...}, ...}</code>；<code>brand_bought_count</code>表示品牌被购买的用户数，结构类似于<code>user_buy_count</code>，提取这两个特征的代码也省略。</p>
<p>Season1的LR中，我们就用了6个特征配合欠采样。当时由于时间关系，对LR的理解也不够深入，加上对特征也没放开手脚去提取，Season1的成绩也没有更进一步的提高，不过为Season2一开始琢磨LR铺平了道路。</p>
<h1 id="写在Season1最后">写在Season1最后</h1>
<p>官方设置Season1的目的应该是让我们入门、让我们熟悉数据，并非让我们尝试牛逼的算法，从这层目的来说，我们基本达到了要求。到Season2时，数据量大了，算法的威力基本就会显现出来，当时我们握着仅有的算法利器<em>LR</em>……</p>
]]></content>
    
    
      <category term="AliBigData" scheme="http://leebug38.github.io/tags/AliBigData/"/>
    
      <category term="Python" scheme="http://leebug38.github.io/tags/Python/"/>
    
      <category term="Recommender" scheme="http://leebug38.github.io/tags/Recommender/"/>
    
      <category term="AliBigData" scheme="http://leebug38.github.io/categories/AliBigData/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[阿里推荐大赛season1--(2)]]></title>
    <link href="http://leebug38.github.io/2014/07/31/%E9%98%BF%E9%87%8C%E6%8E%A8%E8%8D%90%E5%A4%A7%E8%B5%9Bseason1--(2)/"/>
    <id>http://leebug38.github.io/2014/07/31/阿里推荐大赛season1--(2)/</id>
    <published>2014-07-31T14:31:31.000Z</published>
    <updated>2014-08-05T07:24:24.000Z</updated>
    <content type="html"><![CDATA[<p>早在去年暑假在<a href="http://58.214.255.186:3000/" target="_blank">无锡为立</a>实习的时候，我就接触到了<em>推荐系统</em>相关知识，那时候把<a href="http://book.douban.com/subject/10769749/" target="_blank">《推荐系统实践》</a>一书研究了下，并照着实现了大部分算法，尤其是其中的<em>协同过滤</em>跟<em>LFM</em>模型，也是在那个时候接触到了Python。</p>
<p>这次比赛开始，我们就确定使用Python作为第一阶段的开发语言，因为方便直观，上手快，开发效率高。Season1前前后后，算上一些垃圾代码，一万行代码还是有的。仅以此文纪念我们曾经写过的Python代码，由于代码贴的有点多，我就分成了两篇文章。</p>
<h1 id="Teamwork">Teamwork</h1>
<p>比赛开始第一天，我就兴冲冲地构建了本地代码仓库，又因为酷酷宇在东南大学，为了远程协作方便，我在<a href="http://bitbucket.org" target="_blank">Bitbucket</a>搭建了远程代码库，这些都是基于<a href="http://git-scm.com/" target="_blank">Git</a>。后来由于另外两个人对这些不太熟悉，就退而求其次地使用<a href="https://www.dropbox.com" target="_blank">Dropbox</a>作为团队合作的工具了。仅以下图纪念下我维护过的远程代码仓库：<img src="/image/bitbucket.png" alt="Bitbucket_pic"></p>
<h1 id="轻松开好头">轻松开好头</h1>
<p>不管是Season1还是Season2我们基本在开始前两天就搞定本地准备工作，其中最重要的当属构建本地训练、预测框架。</p>
<h2 id="简单处理">简单处理</h2>
<p>原始数据的时间列是中文日期格式，利用正则先转成可处理的日期格式，假设数据是2013年的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">get_date</span><span class="params">(origin_date)</span>:</span>
    month_day = re.findall(<span class="string">r"[\d|.]+"</span>, origin_date)
    month = int(month_day[<span class="number">0</span>])
    day = int(month_day[<span class="number">1</span>])
    <span class="keyword">return</span> date(<span class="number">2013</span>, month, day)
</pre></td></tr></table></figure>

<p>Season1开始两次线上测试是一个星期测试一次，后来改为了一天一测。在线上测试机会不多的时候，我们就得做好线下测试的工作。这次比赛很明显跟时间挂钩的，我们假定4个月的数据是5/6/7/8四个月，那么本地测试的时候，就用8月份（当时是用［7-15，8-15］）有购买行为的(u,b)来测试本地训练预测的效果。下面代码可以获取8月份有购买行为的(u,b)对，并保存在字典<code>test</code>中。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">load_test_set</span><span class="params">(data_path)</span>:</span>
    reader = csv.reader(open(data_path))    <span class="comment"># 使用python的csv模块</span>
    test = {}
    <span class="keyword">for</span> user,brand,action,r_date <span class="keyword">in</span> reader:
        now = get_date(r_date)
        <span class="keyword">if</span> now &gt;= date(<span class="number">2013</span>,<span class="number">7</span>,<span class="number">15</span>) <span class="keyword">and</span> now &lt;= date(<span class="number">2013</span>,<span class="number">8</span>,<span class="number">15</span>) <span class="keyword">and</span> action = <span class="string">'1'</span>:
            test.setdefault(user, set())
            test.get(user).add(brand)
    <span class="keyword">return</span> test
</pre></td></tr></table></figure>

<h2 id="本地评估">本地评估</h2>
<p>有了本地测试集<code>test</code>后，我们就很容易计算本地的准确率、召回率以及F1评分了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">precision</span><span class="params">(predict, test)</span>:</span>
    hit = <span class="number">0</span>
    total = <span class="number">0</span>
    <span class="keyword">for</span> user,p_items <span class="keyword">in</span> predict.items():
        test_items = test.get(user, <span class="string">''</span>)
        <span class="keyword">if</span> test_items:
            <span class="keyword">for</span> item <span class="keyword">in</span> p_items:
            <span class="keyword">if</span> item <span class="keyword">in</span> test_items:
                hit += <span class="number">1</span>
        total += len(p_items)
    <span class="keyword">return</span> hit / (total * <span class="number">1.0</span>)
</pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">recall</span><span class="params">(predict, test)</span>:</span>
    hit = <span class="number">0</span>
    total = <span class="number">0</span>
    <span class="keyword">for</span> user,t_items <span class="keyword">in</span> test.items():
        pred_items = predict.get(user, <span class="string">''</span>)
        <span class="keyword">if</span> pred_items:
            <span class="keyword">for</span> item <span class="keyword">in</span> t_items:
                <span class="keyword">if</span> item <span class="keyword">in</span> pred_items:
                    hit += <span class="number">1</span>
        total += len(t_items)
    <span class="keyword">return</span> hit / (total * <span class="number">1.0</span>)
</pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">f1_score</span><span class="params">(P, R)</span>:</span>
    <span class="keyword">if</span> P == <span class="number">0</span> <span class="keyword">and</span> R == <span class="number">0</span>:
        <span class="keyword">return</span> <span class="number">0</span>
    <span class="keyword">return</span> (<span class="number">2</span> * P * R) / (P + R)
</pre></td></tr></table></figure>

<p>其中，<code>predict</code>跟<code>test</code>是一样的数据结构：<code>{u1: set(), u2: set(), ...}</code>，用集合可以方便去除重复。</p>
<h2 id="结果提交">结果提交</h2>
<p>最终提交结果时，是需要写到一个txt文件里面，并且遵循<a href="http://102.alibaba.com/competition/addDiscovery/gameTopic.htm" target="_blank">官方要求格式</a>，下面函数将上面的<code>predict</code>写入到指定文件<code>file_path</code>中。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">write_into_file</span><span class="params">(predict, file_path)</span>:</span>
    out = file(file_path, <span class="string">'w'</span>)
    <span class="keyword">for</span> user,buy_set <span class="keyword">in</span> predict.items():
        row = <span class="string">'%s\t'</span> % user
        row += (<span class="string">','</span>.join(buy_set))
        out.write(<span class="string">'%s\n'</span> % row)
    out.close()
</pre></td></tr></table></figure>

<h1 id="画图分析">画图分析</h1>
<p>在进行数据分析时，数据可视化无疑可以提高效率，帮助发现蕴含在数据内部的规律。为了保持语言的一致，我们使用了python的<em>Matplotlib</em>模块。后来发现，我们当时有点耿直了，完全可以使用其他画图软件，而且画图没有给我们带来实质性的帮助，使用<em>Matplotlib</em>画图对我们来说是一次性价比不高的选择。Anyway，贴上几个当时我们参考的教程：</p>
<ul>
<li><a href="http://matplotlib.org/users/pyplot_tutorial.html" target="_blank">官方手册</a></li>
<li><a href="http://www.loria.fr/~rougier/teaching/matplotlib/#quick-references" target="_blank">快速入门（英文）</a></li>
<li><a href="http://reverland.org/python/2012/09/07/matplotlib-tutorial/" target="_blank">快速入门（中文）</a></li>
</ul>
<p>我们当时对四种行为每个月的分布、每个用户123天的行为分布、本地能命中的(u,b)的历史行为分布等等都画图进行了分析。比如下图：<img src="/image/hit.png" alt="hit_picture">就是某个本地能命中的(u,b)，红圈表示点击，蓝方块表示购买，紫三角表示收藏。为了批量画图方便，我们没有统一坐标轴比例跟长度，也没有画上图标解释。</p>
<h1 id="未完待续">未完待续</h1>
<p>这篇简单介绍一些准备工作，下一篇记录下我们曾经做过的<em>策略</em>跟<em>LR</em>。</p>
]]></content>
    
    
      <category term="AliBigData" scheme="http://leebug38.github.io/tags/AliBigData/"/>
    
      <category term="Python" scheme="http://leebug38.github.io/tags/Python/"/>
    
      <category term="Recommender" scheme="http://leebug38.github.io/tags/Recommender/"/>
    
      <category term="AliBigData" scheme="http://leebug38.github.io/categories/AliBigData/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[阿里推荐大赛Season1--(1)]]></title>
    <link href="http://leebug38.github.io/2014/07/31/%E9%98%BF%E9%87%8C%E6%8E%A8%E8%8D%90%E5%A4%A7%E8%B5%9Bseason1--(1)/"/>
    <id>http://leebug38.github.io/2014/07/31/阿里推荐大赛season1--(1)/</id>
    <published>2014-07-31T12:19:23.000Z</published>
    <updated>2014-08-06T11:44:42.000Z</updated>
    <content type="html"><![CDATA[<p>今天是2014年7月31日，四个月的比赛已经落下帷幕，期间主要是论文加上老师的项目烦心，不然Season1的总结早就该出炉了（借口）！这个比赛比较适合我，因为比赛时间跨度久，更多比的是毅力和些许学习能力，报名参加的时候我就预料到了比赛结束时的满足感，成绩确实是意外之喜。因为比赛我的安卓计划搁浅了；因为比赛我Emacs有点生疏了；因为比赛我貌似又变瘦了……</p>
<h1 id="比赛简介">比赛简介</h1>
<p>详细的比赛介绍可以看<a href="http://102.alibaba.com/competition/addDiscovery/gameIntroduce.htm" target="_blank">官方网页</a>。这里提几个关键词：</p>
<blockquote>
<p>预测购买；品牌粒度；准确率；召回率；F1评分；</p>
</blockquote>
<h1 id="关于队名">关于队名</h1>
<p>记得当时因为懂点<em>推荐系统</em>的知识，果断拉上酷酷宇跟寝室死胖子报名了。我们本科一个班的，402班，当时想队名的时候，感觉402好突兀，于是乎我瞄了一眼旁边的魅族手机，瞬间决定了队名<em>Fly402</em>。</p>
<h1 id="流水帐">流水帐</h1>
<h2 id="第一次提交">第一次提交</h2>
<p>四个月后的今天，对于Season1的好多细节已经淡忘。记得当时第一天我就祭出了之前写的<em>协同过滤</em>算法，跑了个结果，兴冲冲的等第二天的结果。第二天结果出来了：准确率<code>0.90%</code>，召回率<code>0.60%</code>，得分<code>0.72%</code>，当天排名<code>368</code>，看到结果，一脸失望，心里嘀咕：这算法没搞错吧！其实，只是：</p>
<blockquote>
<p>这次比赛是预测用户第五个月是否会购买，而不是给用户推荐物品；用户行为是很难琢磨的；Season1数据量太小，很难体现相关性！</p>
</blockquote>
<h2 id="恍然大悟">恍然大悟</h2>
<p>有了第一次的结果，加之我们的分析，很快就发现了这不是普通的<em>推荐</em>。并且迅速理清了大方向：这个比赛得分成两部分来做，预测用户历史行为接触过的品牌以及预测用户历史行为中没有接触过的品牌，后面称为交互和未交互。协同过滤其实是侧重预测未交互的部分，既然第一次效果不行，暂且尝试下交互的那部分。接下来的几天围绕着<em>策略</em>展开，比如：用户4个月购买过的，给(u,b)按照一定的时间衰减、行为权重评分再预测等等。就这样，我们的成绩基本在正常轨道，F1评分差不多达到<code>6.5%</code>左右。4月1日之后，我们的策略越做越复杂，这个时候会考虑(u,b)购买时间序列的方差，会考虑(u,b)最后一次购买之后的行为，会考虑(u,b)没有购买行为等等。在结合很多复杂的策略后，我们的成绩慢慢地往上爬，一直爬到<code>7.11%</code>，真的很不容易！</p>
<p>做策略的这段时间很痛苦，没有太大的成就感，但是为了提高成绩，还是硬着头皮往下做，我们甚至画出了本地最后一个月命中的(u,b)的行为序列图，一张张看，寻找其中的规律。Season2时发现其实这是一笔宝贵的财富，方便了我们构造特征！</p>
<h2 id="错过与相遇">错过与相遇</h2>
<blockquote>
<p>每一次的错过，都是为了下一次的相遇。但有时候或许失去了，也就不会再回头。</p>
</blockquote>
<p>这句话念全了有点悲伤，还好我们跟LR（逻辑回归）的缘分只要用前半句就够了。怎讲？比赛开始没有几天，根据比赛论坛上别人的经验，我们就锁定了预测交互部分的算法：<em>逻辑回归</em>。当时，凭借着我对训练集的理解，在我那本红色封面的本子的最后一页上构造了(u,b)的训练集，而这个训练集跟之后4个月一直使用的训练集是一致的！可是当时构造完了之后，我提取了几个特征，用python画图一看，傻眼了，负样本比正样本多太多了，直观上就是<em>不可分</em>的。当时先搁浅了几天，后面想了想，感觉这个应该是有解决方案的，果断去论坛发帖问<a href="http://bbs.aliyun.com/read/155212.html?spm=0.0.0.0.GO9WzZ" target="_blank">如何构造LR训练集</a>，答案是<em>采样</em>！</p>
<h1 id="错过">错过</h1>
<p>那段时间虽然一直使用策略提交预测结果，但也一直琢磨如何使用LR，想法基本有了，开头还是很难的，主要当时不知道去求助算法包，又懒得自己实现。直到好人<a href="http://oilbeater.com/" target="_blank">oilbeater</a>发了一篇<a href="http://oilbeater.com/%E9%98%BF%E9%87%8C%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%AF%94%E8%B5%9B/2014/04/04/the-bigdata-race-3.html" target="_blank">LR入门</a>，我才动手了，那时已经4月8日了，<em>欠采样</em>配合6个特征跑了一个LR预测结果提交了，第二天一看成绩：<code>2.17%</code>，好吧，残了！本以为就这样错过LR了。</p>
<h1 id="相遇">相遇</h1>
<p>转眼4月17日了，Season1快结束了，我们靠策略进入Season2应该问题不大。但是没有用算法解决问题始终让我不爽，最终那次美丽的相遇如期而至！那天我把我的半成品LR甩给了酷酷宇，让他尝试下，打算再提交一次LR预测的结果，那次他把我采样mod那个数换了，也就是换了采样比例，提交了一个预测结果。第二天凌晨4点多，像往常一样醒了，看了下成绩<code>7.02%</code>！当时兴奋的，直接给酷酷宇发了N条短信，把他狂赞一番。算法的神奇带来的快感，你懂的！</p>
<h2 id="定格">定格</h2>
<p>最终，我们使用LR结合策略，Season1最终F1评分定格在<code>7.31%</code>，成绩排名<code>62</code>。距离前面的牛人还有一段距离，但是我们已经很满足了。</p>
<h1 id="总结">总结</h1>
<p>关于Season1的大体过程就如同上面的流水帐，总的来说：</p>
<ul>
<li>参加比赛是兴趣驱动</li>
<li>坚持不懈才是王道</li>
<li>基础不行，有点捉急</li>
<li>热身而已，入门就行</li>
</ul>
]]></content>
    
    
      <category term="AliBigData" scheme="http://leebug38.github.io/tags/AliBigData/"/>
    
      <category term="Recommender" scheme="http://leebug38.github.io/tags/Recommender/"/>
    
      <category term="AliBigData" scheme="http://leebug38.github.io/categories/AliBigData/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android开发--起步]]></title>
    <link href="http://leebug38.github.io/2014/03/07/android%E5%BC%80%E5%8F%91--%E8%B5%B7%E6%AD%A5/"/>
    <id>http://leebug38.github.io/2014/03/07/android开发--起步/</id>
    <published>2014-03-07T01:19:17.000Z</published>
    <updated>2014-03-07T12:07:21.000Z</updated>
    <content type="html"><![CDATA[<p>暑假找工作前再学习一个技能，这次坚决不加黄点，来点实在的。考虑自身将来的发展，我一直希望以后的工作围绕<strong>用户体验</strong>，不管是App开发、Web开发，甚至机器学习一类的研究开发，我都希望离用户近点。对于Android开发，我还几乎是零基础，Java也不太会，不过任何学问技术，在精通之前总是相对容易的，只有愿不愿意了！由于某些原因，这次得在windows下先混一段时间了，Go!</p>
<h1 id="ADT-Bundle快速搭建">ADT-Bundle快速搭建</h1>
<p>ADT-Bundle是由<a href="http://developer.android.com/index.html" target="_blank">Google Android官方</a>提供的集成式IDE，其中包含了<strong>Eclipse</strong>，你无需再去下载<strong>Eclipse</strong>，并且里面已集成了插件，它解决了大部分新手通过<strong>Eclipse</strong>来配置Android开发环境的复杂问题。</p>
<h2 id="ADT-Bundle下载">ADT-Bundle下载</h2>
<p>下载链接：<a href="http://developer.android.com/sdk/index.html" target="_blank">ADT-Bundle下载</a>，我的下载包的文件名为：<code>adt-bundle-windows-x86-20131030.zip</code>，ADT-Bundle包括了开发所需的一切，解压后目录：<img src="/image/directory.PNG" alt="directory"></p>
<h2 id="安装JDK">安装JDK</h2>
<p>Android开发是基于Java语言、工具和库的，所以得安装Java。现在已经到了JDK 1.7版本，下载链接：<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank">JDK下载</a>，关于如何安装，配置<code>JAVA_HOME</code>、<code>CLASSPATH</code>、<code>PATH</code>自行<a href="http://www.google.com.hk/" target="_blank">Google</a>之。检测是否配置成功：cmd终端里面<code>java -version</code>,<code>javac -version</code>看结果即可。</p>
<h2 id="设置Tools_PATH">设置Tools PATH</h2>
<p>为了方便以后在命令行使用Android SDK Tools，可以将<code>&lt;your folder&gt;/android-sdk/tools/</code>和<code>&lt;yobur folder&gt;/android-sdk/platform-tools/</code>两个路径添加到PATH环境变量中，其中<code>&lt;your folder&gt;</code>为你的<code>android-sdk</code>文件夹放置目录。</p>
<h2 id="SDK管理器">SDK管理器</h2>
<p>运行ADT-Bundle下载包的解压根目录下的<code>SDK Manager.exe</code>，进入界面选择需要的Tools以及API等级进行安装或更新。在<strong>Eclipse</strong>中也可以打开，打开过程：Window -&gt; Android SDK Manager。</p>
<h2 id="配置AVD">配置AVD</h2>
<p>AVD（Android Virtual Device），即模拟器，运行在电脑上的安卓虚拟设备，几乎跟一台真正的安卓设备一样。打开Window -&gt; Android Virtual Device Manager，然后<code>New</code>一个，见到下图界面：<img src="/image/avd.PNG" alt="avd">配置完后点击<code>Start</code>启动。</p>
<h1 id="Hello_World">Hello World</h1>
<p>创建一个Hello World项目，通过File -&gt; New -&gt; Android Application Project，然后输入Hello World（项目名字),一路到底。模拟器调试运行：右击android工程 -&gt; Run as -&gt; Android Application。</p>
<h1 id="Eclipse_+_Emacs">Eclipse + Emacs</h1>
<p>现在写<strong>Python</strong>和写博客都习惯用<strong>Emacs</strong>编辑器，基本脱离鼠标，全键盘操作。在<strong>Eclipse</strong>里面写了几行代码，感觉不太爽，就到Window -&gt; Preferences -&gt; General -&gt; Keys里面配置快捷键。来来回回的配置+体验，就在那么一瞬间发现了好东西，截图留作纪念：<img src="/image/eclipse_emacs.png" alt="keysSchema">真后悔没早点发现！发现后赶紧<a href="http://www.google.com.hk/" target="_blank">Google</a>，看看有没有更好的<strong>Emacs</strong>配置，后来发现了加强版插件<strong>Emacs+</strong>，也就是上面截图中的选择项了，关于如何安装，很简单，这里给个链接：<a href="http://www.mulgasoft.com/emacsplus" target="_blank">Emacsplus</a>。</p>
<h1 id="回头看看">回头看看</h1>
<p>虽然ADT-Bundle这么完善，这样方便了入门，却容易让人不知其所以然，所以建议还是了解下集成的部件是干嘛的，或者看看分步骤配置的过程。最后留几个知识点：</p>
<ol>
<li>PATH环境变量：作用是指定命令搜索路径，在命令行下面执行命令如javac编译java程序时，它会到PATH变量所指定的路径中查找看是否能找到相应的命令程序。我们需要把jdk安装目录下的bin目录增加到现有的PATH变量中，bin目录中包含经常要用到的可执行文件如javac/java/javadoc等待，设置好PATH变量后，就可以在任何目录下执行javac/java等工具了。</li>
<li>CLASSPATH环境变量：作用是指定类搜索路径，要使用已经编写好的类，前提当然是能够找到它们了，JVM就是通过CLASSPATH来寻找类的。我们需要把jdk安装目录下的lib子目录中的dt.jar和tools.jar设置到CLASSPATH中，当然，当前目录“.”也必须加入到该变量中。</li>
<li>JAVA_HOME环境变量。它指向jdk的安装目录，Eclipse/NetBeans/Tomcat等软件就是通过搜索JAVA_HOME变量来找到并使用安装好的jdk。</li>
</ol>
]]></content>
    
    
      <category term="Android" scheme="http://leebug38.github.io/tags/Android/"/>
    
      <category term="Eclipse" scheme="http://leebug38.github.io/tags/Eclipse/"/>
    
      <category term="Android" scheme="http://leebug38.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[博客装扮--Pacman主题]]></title>
    <link href="http://leebug38.github.io/2014/02/11/%E5%8D%9A%E5%AE%A2%E8%A3%85%E6%89%AE--pacman%E4%B8%BB%E9%A2%98/"/>
    <id>http://leebug38.github.io/2014/02/11/博客装扮--pacman主题/</id>
    <published>2014-02-11T03:26:55.000Z</published>
    <updated>2014-03-07T12:09:33.000Z</updated>
    <content type="html"><![CDATA[<p>人靠衣装，佛靠金装，<a href="http://zespia.tw/hexo/" target="_blank">Hexo</a>如此牛逼的博客，怎能没个让自己看着爽心的主题装扮下呢？<a href="http://zespia.tw/hexo/" target="_blank">Hexo</a>版本<code>2.4+</code>的默认主题是<code>Landscape</code>，看着实在没什么感觉，于是下定决心换一个自己看着爽心的主题。看到<a href="http://yangjian.me" target="_blank">Alimon’s blog</a>后，感觉这个博客的主题不错，尤其是<code>header</code>，<code>footer</code>部分，既然<em>中</em>了，那还等啥，走你！</p>
<h1 id="Pacman简介">Pacman简介</h1>
<p>Pacman是一款为<a href="http://zespia.tw/hexo/" target="_blank">Hexo</a>打造的<em>扁平化</em>，有着<em>响应式</em>设计的主题。<em>扁平化</em>和<em>响应式</em>在如今的手机应用、网页设计领域已是随处可见，「Win8 Metro」和「ios7」就是典型的扁平化设计，简约清晰！前端牛逼框架<a href="http://www.bootcss.com/" target="_blank">Bootstrap</a>也支持响应式设计，使得用户在移动设备上也有很好的体验。Pacman中所有的css都采用<a href="http://learnboost.github.io/stylus/" target="_blank">Stylus</a>编写，自己动手改动也比较方便，不懂前端的我对此深有感触。关于Pacman的更多详细介绍，参见<a href="http://yangjian.me/workspace/introducing-pacman-theme/" target="_blank">《Pacman主题介绍》</a>，安装、设置、更新、配置等都很详细。</p>
<h1 id="小改动">小改动</h1>
<h2 id="主题色">主题色</h2>
<p>Pacman默认颜色是<code>#ea6753</code>，蛮有活力的颜色，我本打算直接换一个主题色，但试了好几个，感觉一般。经过了漫无目的地思考与搜索，最后打算结合主题<a href="https://github.com/sun11/hexo-theme-paperbox" target="_blank">paperbox</a>的背景色。有了想法，动手开搞就是水到渠成了，直接贴操作过程：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>$ vi themes/pacman/<span class="built_in">source</span>/css/_base/variable.styl <span class="comment"># vi仅仅是编辑器</span>
</pre></td></tr></table></figure>

<p>修改其中的各种<code>颜色代码</code>，可以改变配色方案。我的主题的背景色是一张图片，Pacman代码的组织非常「模块化」，按照其思想，改动如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="variable">$ </span>vi themes/pacman/_config.yml  <span class="comment"># 添加background_img: img/noise.png</span>
  <span class="comment"># 下面文件中在//image位置出添加：background-img = hexo-config("background_img")</span>
<span class="variable">$ </span>vi themes/pacman/source/css/_base/variable.styl
</pre></td></tr></table></figure>

<p>接下来的修改中如果需要改成该背景图片颜色，将颜色设置为<code>url(root+background-img)</code>即可。「模块化」的好处就是：接下来你如果有其它背景图片，只需在<code>themes/pacman/_config.yml</code>中修改<code>background_img</code>属性就行了。</p>
<p>背景色设置成图片后，本着少改动的原则，我将<code>header</code>、<code>footer</code>的主题色设置为<code>transparent</code>，就有了现在的效果。</p>
<h2 id="hover配色">hover配色</h2>
<p>简而言之，css中<code>:hover</code>伪类作用：在鼠标移到元素上时向此元素添加特殊的样式。我也是这次该主题才涉足css，还是菜鸟中的菜鸟。受益于「模块化」的好处，改动还是比较容易的。改动Pacman的css代码，请进入<code>themes/pacman/source/css/_partial</code>文件夹改动。原先Pacman的鼠标悬停时元素变成「主题色」或者「蓝色」，我统一换成了「红蓝切换」，即巴萨队服的主颜色切换了。PS：一般都是改动<code>&amp;:hover</code>前后代码的<code>color</code>值。</p>
<h2 id="code样式">code样式</h2>
<p>默认的代码高亮配色感觉不是很搭，Pacman代码高亮使用的是<a href="http://highlightjs.org" target="_blank">highlight.js</a>，我打算参照在<a href="http://highlightjs.org/static/test.html" target="_blank">配色方案</a>中选取一种替代原先的配色，折腾了会不知道如何直接换，最后还是自己手动配色：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>$ vi themes/pacman/<span class="built_in">source</span>/css/_base/code.styl
</pre></td></tr></table></figure>

<p>无奈笨拙，只能自己选颜色代码，手动改，以后在琢磨高级的方法。</p>
<h2 id="图片">图片</h2>
<p>直接替换<code>themes/pacman/source/img</code>中的图片即可，再一次，费了不少心思搞了几张图片替换了。<code>header</code>处原先是<code>.svg</code>格式的图片，我也使用软件「inkscape」转换了，可惜没有达到应有的效果，主要是在IE浏览器中图片还是残了，只能自我安慰「珍爱前端程序员生命，请远离IE」。</p>
<h2 id="其它">其它</h2>
<p>想法还是挺多的，就是水平受限，其它的改动也不多，主要就是某些组件的排版，代码块背景设成圆角等等。以后边学习，边改动吧。</p>
<h1 id="写在最后">写在最后</h1>
<ul>
<li>Pacman需要安装<a href="http://zespia.tw/hexo/" target="_blank">Hexo</a> 2.4.5 或以上版本。</li>
<li>改网页布局啥的可以使用Chrome的「F12」，各种方便。</li>
<li>不懂代码没关系，知道改哪里就行了，在折腾过程中，我经常使用全局搜索包含某行代码的文件：<code>find &lt;folder&gt; | xargs grep &quot;目标代码&quot;</code>，然后或者修改，或者参考，还是挺方便的。</li>
<li>谢谢<a href="http://yangjian.me" target="_blank">yangjian.me</a>，这么好的主题，以及代码。</li>
<li>我的博客源文件<a href="https://github.com/leebug38/hexo" target="_blank">GitHub地址</a>。</li>
<li>以此主题致敬「红蓝巴萨」！</li>
</ul>
]]></content>
    
    
      <category term="hexo" scheme="http://leebug38.github.io/tags/hexo/"/>
    
      <category term="writing" scheme="http://leebug38.github.io/categories/writing/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用hexo搭建博客]]></title>
    <link href="http://leebug38.github.io/2014/02/06/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://leebug38.github.io/2014/02/06/使用hexo搭建博客/</id>
    <published>2014-02-06T10:17:12.000Z</published>
    <updated>2014-02-10T05:23:06.000Z</updated>
    <content type="html"><![CDATA[<p>开始我并没有打算搭建一个博客，只是想找个<em>平台</em>潦草地记录平时遇到的问题，再稍微规划下一些日常事情。最近半年终于干了点计算机工程方面的实事，之前都是水过的，说来实在惭愧。去年暑期实习的时候，我接触到了<em>Python</em>，<em>Git</em>，<em>Node.js</em>以及<em>MongoDB</em>，在此期间用<a href="http://cn.efficientsoftware.net/" target="_blank">高效e人</a>来记录点滴，但总感觉有点不符合程序猿的身份；后来寒假实习遇到了<a href="http://cn0popeye.com/" target="_blank">树上</a>，跟着他后面接触到了一些比较流行的技术，尤其是适合折腾的技术，这段时间学会使用<a href="http://trello.com" target="_blank">trello</a>来管理时间，另外有幸接触到了神的编辑器<em>emacs</em>和标记语言<em>markdown</em>。最近，烦于乱七八糟的记录以及臃肿的chrome书签，加之缺少整理的动力，最终的最终我准备搭建一个博客，以便自己整理总结平时所学所闻，之前也开通过几个BSP<sup><a href="#[1]">[1]</a></sup>类的博客，装饰好后没写一个字，实在没有写的动力；多亏了emacs，最近喜欢折腾一些技术，这次下定决心搭一个独立博客，寻找时发现<a href="http://cn.wordpress.org/" target="_blank">Wordpress</a>挺受人青睐，而且<em>emacs</em>也有很好的插件支持。就在折腾的初始阶段，看各种评论的时候发现了<em>Jekyll+github</em>，进而又邂逅了最终的选择<a href="http://zespia.tw/hexo/" target="_blank">hexo</a>，看到关于<a href="http://zespia.tw/hexo/" target="_blank">hexo</a>的描述时，犹如一股清泉注入心底，怎一个爽字了得！我就是冲着<em>Node.js</em>，<em>Git</em>和写博客神器<em>markdown</em>情定了<a href="http://zespia.tw/hexo/" target="_blank">hexo</a>，当然后来发现<a href="http://zespia.tw/hexo/" target="_blank">hexo</a>中的命令，配置等都封装好了好多技术细节。好了，闲话少说，进入正题，记录下这次博客折腾之旅，也是我的第一篇博客，与有缘人分享！PS：没有详细的教程，只有我参考的文章出处以及我纠结过的坎儿。</p>
<h1 id="hexo是啥">hexo是啥</h1>
<p><a href="http://zespia.tw/hexo/" target="_blank">hexo</a>是一个基于<a href="http://nodejs.org/" target="_blank">Node.js</a>的静态博客程序，我在寻觅博客的时候，发现好多博客都标榜了<strong>静态博客程序</strong>，我的理解就是本地生成了静态html文件，然后再部署到服务器上。由于没有折腾过其他博客，博客之间的差异我也无从比较，只能人云亦云了。关于<a href="http://zespia.tw/hexo/" target="_blank">hexo</a>的特点，出现频率最高的就是：</p>
<blockquote>
<p>快速！简单！可扩展性！</p>
</blockquote>
<h1 id="万事具备">万事具备</h1>
<p>不懂这些也没关系，我只是想稍微整理下。</p>
<h2 id="Node-js">Node.js</h2>
<p><a href="http://nodejs.org/" target="_blank">Node.js</a>是一个让<em>JavaScript</em>运行在服务端的开发平台，<a href="http://nodejs.org/" target="_blank">Node.js</a>的<em>JavaScript</em>引擎是V8，来自Google Chrome项目。特点：</p>
<blockquote>
<p>事件驱动；异步编程；回调函数；适合I/O密集型需求</p>
</blockquote>
<p>我也是去年暑假在一家初创企业实习时，偶然接触到了<a href="http://nodejs.org/" target="_blank">Node.js</a>，后来在学校折腾小论文，也没怎么进一步研究。总的感觉就是：理解其思想相对容易，想要深入掌握<a href="http://nodejs.org/" target="_blank">Node.js</a>的话，需有较为深厚的JS功力（往往是前端JS）；对我而言，之前没有写过JS，所以瓶颈就在JS这门语言上，这里我只能补充一句<strong>JS博大精深</strong>啊！</p>
<ul>
<li><a href="http://book.douban.com/subject/10789820/" target="_blank">《Node.js开发指南》</a>：入门级书，按照书上搭建一个简易的博客还是不错的！</li>
<li><a href="http://book.douban.com/subject/25768396/" target="_blank">《深入浅出Node.js》</a>：上个月刚入手的一本书，书很实用，就是对我来说还有点深奥，JS是硬伤！里面很多高级的用法，比如我的代码中尽是嵌套很深的回调函数，书中有几种优美的解决方案。慢慢研习！</li>
</ul>
<h2 id="Git_&amp;_GitHub">Git &amp; GitHub</h2>
<blockquote>
<p><a href="http://git-scm.com/" target="_blank">Git</a>是一个免费的开源分布式版本控制系统，可以使用它来快速，高效的处理一切大小项目。<br /><br><a href="http://github.com/" target="_blank">GitHub</a>是这个星球上最流行的开源托管服务，是一个程序员的名片，这年头不逛GitHub，都不好意思说自己是程序猿。</p>
</blockquote>
<p>开始遇到<a href="http://git-scm.com/" target="_blank">Git</a>的时候，建立的是本地仓库，我也只会用<code>git clone</code>，<code>git init</code>，<code>git add</code>，<code>git commit</code>和<code>git push</code>这些简单命令，后来慢慢接触到<a href="http://github.com/" target="_blank">GitHub</a>以及可以免费建立私人仓库的<a href="http://bitbucket.org/" target="_blank">Bitbucket</a>，也熟悉了更多应用场合和命令，本地和远程仓库的基本使用还是能hold住的。列出一些参考资料，其中我也只看了<a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank">Git 简易指南</a>和<a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html" target="_blank">Git图解</a>：</p>
<h3 id="Git入门">Git入门</h3>
<ul>
<li>入门宝典：<a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank">Git 简易指南</a>，简洁明了。</li>
<li><a href="http://git-scm.com/" target="_blank">Git</a>的官方网站提供了<a href="http://git-scm.com/" target="_blank">Git</a>的所有<a href="http://git-scm.com/doc" target="_blank">文档</a>。也可以参考<a href="http://gitref.org/" target="_blank">Git Reference</a>。</li>
<li>书籍：<ul>
<li>《Pro Git》提供在线的<a href="http://git-scm.com/book/zh" target="_blank">中文版</a>和<a href="http://git-scm.com/book" target="_blank">英文版</a>。</li>
<li><a href="http://book.douban.com/subject/6526452/" target="_blank">《Git权威指南》</a>：内容略充实了点。</li>
</ul>
</li>
<li>Github与Code School联合提供了一个在线互动教程：<a href="http://try.github.io/levels/1/challenges/1" target="_blank">Try Git</a>。</li>
<li>进阶篇：<ul>
<li><a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html" target="_blank">Git图解</a>：简洁，有事没事可以瞅瞅。</li>
<li><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/index.html" target="_blank">Git Magic</a>。</li>
<li><a href="http://think-like-a-git.net" target="_blank">Think like a Git</a>。</li>
</ul>
</li>
</ul>
<h3 id="GitHub入门">GitHub入门</h3>
<ul>
<li><a href="http://github.com/" target="_blank">Github</a>提供了官方的<a href="http://help.github.com/" target="_blank">帮助信息</a>和他们的<a href="http://github.com/blog" target="_blank">博客</a>。</li>
<li><a href="http://book.douban.com/subject/6526452/" target="_blank">《Git权威指南》</a>作者蒋鑫编写的<a href="http://www.worldhello.net/gotgithub/01-explore-github/index.html#id8" target="_blank">GotGitHub</a>。</li>
<li>如果还对加入<a href="http://github.com/" target="_blank">Github</a>犹豫不决，看下<a href="http://www.yangzhiping.com/tech/github.html" target="_blank">如何高效利用Github</a>。</li>
</ul>
<h2 id="Markdown">Markdown</h2>
<p>第一次知道Markdown的时候，脑海里突然闪现出N多<code>.md</code>后缀的文件，典型的如<a href="http://github.com/" target="_blank">Github</a>中仓库的<code>README.md</code>，相见恨晚啊！。后来各种机会跟Markdown碰面，最终也成了我挑选博客的必备条件之一！特点：</p>
<blockquote>
<p>轻量级标记语言；格式即内容；易读易写；兼容HTML</p>
</blockquote>
<p>兼容HTML意义重大，比如Markdown中插入图片没法调整大小，但是使用HTML中<code>&lt;img&gt;</code>标签就相当easy了！各种学习文档自行<a href="http://www.google.com.hk/" target="_blank">Google</a>之，这里再留下几点：</p>
<ul>
<li>查阅语法：<a href="http://wowubuntu.com/markdown/" target="_blank">Markdown语法说明</a></li>
<li>编辑器：<ul>
<li><a href="https://chrome.google.com/webstore/detail/made/oknndfeeopgpibecfjljjfanledpbkog" target="_blank">MaDe</a>：Chrome插件，还行。</li>
<li><a href="http://www.zybuluo.com/mdeditor" target="_blank">Cmd</a>：在线Markdown编辑阅读器，很人性化，同步滚动。</li>
<li><em>emacs</em>: 写博客使用，需要一定的决心来折腾此神器。</li>
</ul>
</li>
</ul>
<h1 id="搭建">搭建</h1>
<p>搭建详细过程参考：</p>
<ul>
<li><a href="http://zespia.tw/hexo/docs/index.html" target="_blank">官方文档</a></li>
<li><a href="http://yangjian.me/workspace/building-blog-with-hexo/" target="_blank">Alimon’s blog</a></li>
<li><a href="http://zipperary.com/categories/hexo/" target="_blank">Zippera’s blog</a></li>
</ul>
<h2 id="关于版本">关于版本</h2>
<ul>
<li>系统：Ubuntu 12.04.3 LTS 32bit</li>
<li><a href="http://nodejs.org/" target="_blank">Node.js</a>：v0.10.25</li>
<li><em>npm</em>：1.3.24</li>
<li><a href="http://zespia.tw/hexo/" target="_blank">hexo</a>：2.4.5</li>
</ul>
<h2 id="安装">安装</h2>
<p>安装时使用<a href="http://nodejs.org/" target="_blank">Node.js</a>的包管理器<em>npm</em>，一般安装<a href="http://nodejs.org/" target="_blank">Node.js</a>的时候会自带安装。这里给个在各种平台安装<a href="http://nodejs.org/" target="_blank">Node.js</a>的<a href="http://www.infoq.com/cn/articles/nodejs-npm-install-config" target="_blank">链接</a>。</p>
<p>主要命令：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="variable">$ </span>npm install -g hexo
<span class="variable">$ </span>hexo init &lt;folder&gt;
</pre></td></tr></table></figure>

<p><code>npm install</code>加上参数<code>-g</code>表示全局安装，否则你会发现在当前目录文件下多了<code>node_modules</code>文件夹，工具都安装在其中。我在安装插件时就是不带参数<code>-g</code>安装：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="variable">$ </span>npm install &lt;plugin-name&gt; <span class="comment"># 安装hexo-generator-feed和 hexo-generator-sitemap</span>
</pre></td></tr></table></figure>

<h2 id="配置">配置</h2>
<p>全局配置文件存储在博客根目录下，名为<code>_config.yml</code>，参考上面的文档，尽情配置吧！</p>
<h2 id="主题">主题</h2>
<p>执行下面的命令拷贝主题包到本地，然后修改<code>_config.yml</code>中的<code>theme</code>项为<code>theme-name</code>。目前已有主题见<a href="http://github.com/tommy351/hexo/wiki/Themes" target="_blank">官方主题</a>。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>$ git clone <span class="tag">&lt;<span class="title">repository</span>&gt;</span> themes/<span class="tag">&lt;<span class="title">theme-name</span>&gt;</span>
</pre></td></tr></table></figure>

<p>我的博客采用的是<a href="http://github.com/tommy351/hexo/wiki/Themes" target="_blank">Pacman</a>主题，并且借用了<a href="http://zipperary.com/categories/hexo/" target="_blank">Zippera’s blog</a>的背景图片，然后将主题颜色配置为红蓝色<sup><a href="#[2]">[2]</a></sup>。</p>
<h2 id="本地运行与调试">本地运行与调试</h2>
<p>在本地如果需要预览或者调试你的博客，可以启动本地服务器：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="variable">$ </span>hexo server
</pre></td></tr></table></figure>

<p>网页运行在<code>http://localhost:4000</code>，更多高级启动方式参见<a href="http://zespia.tw/hexo/docs/index.html" target="_blank">官方文档</a>。</p>
<h2 id="部署">部署</h2>
<p>我将博客部署到<a href="http://github.com/" target="_blank">Github</a>上，配置文件<code>_config.yml</code>：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="label">deploy:</span>
  type: github
  repository: https://github<span class="preprocessor">.com</span>/leebug38/leebug38<span class="preprocessor">.github</span><span class="preprocessor">.io</span><span class="preprocessor">.git</span>
  branch: master
</pre></td></tr></table></figure>

<p>需要在<a href="http://github.com/" target="_blank">Github</a>上创建仓库，并且仓库名一定要为<code>username.github.io</code>，<code>username</code>为你的<a href="http://github.com/" target="_blank">Github</a>注册用户名，即二级域名。配置文件中代码仓库<code>URL</code>最好使用<code>https</code>形式的。其实上面的步骤就是布置<a href="http://pages.github.com/" target="_blank">GitHub Pages</a>。我没有使用个性域名，若有其他需求，可以看上面的参考文档以及<a href="http://pages.github.com/" target="_blank">GitHub Pages</a>的<a href="http://help.github.com/categories/20/articles" target="_blank">帮助文档</a>。最后部署到<a href="http://github.com/" target="_blank">Github</a>上：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="variable">$ </span>hexo clean  <span class="comment"># 清除缓存文件(db.json)和hexo generate生成的文件(public)</span>
<span class="variable">$ </span>hexo generate <span class="comment"># 生成静态文件，存储在public文件夹中</span>
<span class="variable">$ </span>hexo deploy <span class="comment"># 部署你的网页</span>
</pre></td></tr></table></figure>

<p>等十分钟左右，在浏览器中输入<code>username.github.io</code>就见到成果了。注意<code>hexo deploy</code>的部署过程：将<code>public</code>中文件复制到<code>.deploy</code>中，然后就是利用<a href="http://git-scm.com/" target="_blank">Git</a>来<code>push</code>到远程<a href="http://github.com/" target="_blank">GitHub</a>仓库了。</p>
<h2 id="写博客">写博客</h2>
<p>博客根目录下一行命令即可：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>$ hexo <span class="keyword">new</span> [layout] &lt;title&gt;
</pre></td></tr></table></figure>

<p><a href="http://zespia.tw/hexo/" target="_blank">hexo</a>有三种<code>layout</code>: <code>post</code>，<code>page</code>，和<code>draft</code>。不带此参数，则采用默认<code>layout</code>，文件<code>_config.yml</code>配置<code>default_layout</code>项。详情可以参考<a href="http://zespia.tw/hexo/docs/writing.html" target="_blank">writing</a>。</p>
<h2 id="简单优化">简单优化</h2>
<p>参照上面三篇文档，我也进行了简单优化：添加了<code>多说评论</code>，<code>RSS</code>，<code>sitemap</code>，以后优化完成后一并补上折腾过程。</p>
<h1 id="后话">后话</h1>
<ul>
<li>博客的搭建就暂且到这里，优化的路还很长，比如前端按照自己喜好修改等等。</li>
<li>第一篇博客写的也有点冗长，大招时间憋长了，见谅！</li>
<li><em>Markdown</em>真乃神器，初次使用，总感觉写的不好，多看多写！</li>
<li>学习一样东西最好的方法是：先模仿大神，再根据自己的需要来折腾！</li>
</ul>
<hr>
<p><span id="[1]">[1]</span> BSP：博客服务提供商。</p>
<p><span id="[2]">[2]</span> 红蓝色：西甲豪门巴塞罗那的队服颜色，代表了巴萨。本人正努力成为合格的巴萨球迷。</p>
]]></content>
    
    
      <category term="hexo" scheme="http://leebug38.github.io/tags/hexo/"/>
    
      <category term="Node.js" scheme="http://leebug38.github.io/tags/Node.js/"/>
    
      <category term="Git" scheme="http://leebug38.github.io/tags/Git/"/>
    
      <category term="Markdown" scheme="http://leebug38.github.io/tags/Markdown/"/>
    
      <category term="writing" scheme="http://leebug38.github.io/categories/writing/"/>
    
  </entry>
  
</feed>
